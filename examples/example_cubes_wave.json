{"shaders":[{"source":"// The contents of this tab will be prefixed in all shaders.\n\nconst vec3 cubeVertices[8] = vec3[8](\n  vec3(-1.0, -1.0, -1.0),\n  vec3( 1.0, -1.0, -1.0),\n  vec3(-1.0,  1.0, -1.0),\n  vec3( 1.0,  1.0, -1.0),\n  vec3(-1.0, -1.0,  1.0),\n  vec3( 1.0, -1.0,  1.0),\n  vec3(-1.0,  1.0,  1.0),\n  vec3( 1.0,  1.0,  1.0)\n);\n\nconst vec3 cubeNormals[6] = vec3[6](\n  vec3( 0.0,  0.0, -1.0),\n  vec3( 0.0, -1.0,  0.0),\n  vec3(-1.0,  0.0,  0.0),\n  vec3( 0.0,  1.0,  0.0),\n  vec3( 1.0,  0.0,  0.0),\n  vec3( 0.0,  0.0,  1.0)\n);\n\nconst int cubeIndices[36] = int[36](\n  0, 2, 3,\n  0, 3, 1,\n  0, 1, 5,\n  0, 5, 4,\n  0, 4, 6,\n  0, 6, 2,\n  7, 2, 6,\n  7, 3, 2,\n  7, 1, 3,\n  7, 5, 1,\n  7, 4, 5,\n  7, 6, 4\n);\n"},{"source":"#pragma size 64 64\n\nvoid mainSimulation(out vec4 oPosition, out vec4 oColor, out vec4 oData2, out vec4 oData3, out vec4 oData4, out vec4 oData5) {\n  ivec2 coord = ivec2(gl_FragCoord);\n  int id = iSize.x * coord.y + coord.x;\n\n  float scale = 1.0 / float(max(iSize.x, iSize.y));\n  vec2 pos = (gl_FragCoord.xy - vec2(iSize) * 0.5) * scale;\n  oPosition = vec4(pos, -1.25, 1.0);\n  \n  oPosition.z += cos(distance(oPosition.xyz, vec3(0.0)) * 80.0 - iTime * 2.0) * 0.02;\n\n  vec2 texcoord = gl_FragCoord.xy / vec2(iSize);\n  oColor = vec4(texcoord, 0.0, 1.0);\n}\n"},{"source":"#pragma vertexCount 36\n#pragma cull back\n\nout vec4 vColor;\n\nvoid mainVertex(out vec4 oPosition) {\n  int instanceID = gl_VertexID / 36;\n  ivec2 coord = ivec2(instanceID % iSize.x, instanceID / iSize.x);\n\n  oPosition = texelFetch(iFragData[0], coord, 0);\n  oPosition.xyz += cubeVertices[cubeIndices[gl_VertexID % 36]] * 0.004;\n\n  oPosition = iModelViewProjection * oPosition;\n\n  vColor = texelFetch(iFragData[1], coord, 0);\n\n  vec3 normal = cubeNormals[gl_VertexID / 6 % 6];\n  vec3 lightDir = normalize(vec3(0.6, 0.3, 1.0));\n  vColor *= 0.6 + 0.4 * max(0.0, dot(lightDir, normal));\n}\n"},{"source":"in vec4 vColor;\n\nvoid mainFragment(out vec4 oColor) {\n  oColor = vColor;\n}\n"}]}